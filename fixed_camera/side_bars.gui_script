local fixed_camera = require('fixed_camera.fixed_camera')

function init(self)
	fixed_camera.add_window_listener(msg.url("#"))
end

function final(self)
	fixed_camera.remove_window_listener(msg.url("#"))
end

function on_message(self, message_id, message, sender)
	if message_id == hash("window_update") then
		local left_node = gui.get_node("left")
		local right_node = gui.get_node("right")
		local top_node = gui.get_node("top")
		local bottom_node = gui.get_node("bottom")

		-- set the color for the side bars
		gui.set_color(left_node, fixed_camera.__side_bars_color)
		gui.set_color(right_node, fixed_camera.__side_bars_color)
		gui.set_color(top_node, fixed_camera.__side_bars_color)
		gui.set_color(bottom_node, fixed_camera.__side_bars_color)

		-- show the horizontal bars if they are visable
		if message.bar.width > 0 then
			local bar_width = fixed_camera.world_to_screen(message.bar.width, 0)
			local width = fixed_camera.__viewport_rect[1] + fixed_camera.__viewport_rect[3]
			local height = fixed_camera.__logical_height
			
			gui.set_enabled(left_node, true)
			gui.set_enabled(right_node, true)
			gui.set_position(left_node, vmath.vector3(0, height/2, 0))
			gui.set_scale(left_node, vmath.vector3(bar_width, height, 1))
			gui.set_position(right_node, vmath.vector3(width, height/2, 0))
			gui.set_scale(right_node, vmath.vector3(bar_width, height, 1))
		else
			gui.set_enabled(left_node, false)
			gui.set_enabled(right_node, false)			
		end

		-- show the vertical bars if they are visable
		if message.bar.height > 0 then
			local _, bar_height = fixed_camera.world_to_screen(0, message.bar.height)
			local width = fixed_camera.__viewport_rect[1] + fixed_camera.__viewport_rect[3]
			local height = fixed_camera.__viewport_rect[2] + fixed_camera.__viewport_rect[4]
			
			gui.set_enabled(top_node, true)
			gui.set_enabled(bottom_node, true)
			gui.set_position(top_node, vmath.vector3(width/2, height, 0))
			gui.set_scale(top_node, vmath.vector3(width, bar_height, 1))
			gui.set_position(bottom_node, vmath.vector3(width/2, 0, 0))
			gui.set_scale(bottom_node, vmath.vector3(width, bar_height, 1))
		else
			gui.set_enabled(top_node, false)
			gui.set_enabled(bottom_node, false)
		end
	end
end
