local fixed_camera = require("fixed_camera.fixed_camera")

local CLEAR_COLOR = hash("clear_color")
local WINDOW_RESIZED = hash("window_resized")
local SET_VIEW_PROJECTION = hash("set_view_projection")
local WINDOW_UPDATE = hash("window_update")
local RECALC_MATRIX = hash("recalc_matrix")

local function calc_screen_rect(width, height)
    -- calculate the acpect ratio
    local aspect_ratio = width / height
    local logical_width, logical_height
    
    -- calculate the logical width and height in comparation with the window
    if aspect_ratio > (fixed_camera.__logical_width / fixed_camera.__logical_height) then
        if aspect_ratio > fixed_camera.__max_aspect_ratio then
            logical_width  = fixed_camera.__logical_width / fixed_camera.__max_aspect_ratio * aspect_ratio
            logical_height = fixed_camera.__logical_width / fixed_camera.__max_aspect_ratio
        else
            logical_width  = fixed_camera.__logical_width
            logical_height = fixed_camera.__logical_width / aspect_ratio
        end
    else
        if aspect_ratio < fixed_camera.__min_aspect_ratio then
            logical_width  = fixed_camera.__logical_height * fixed_camera.__min_aspect_ratio
            logical_height = fixed_camera.__logical_height * fixed_camera.__min_aspect_ratio / aspect_ratio
        else
            logical_width  = fixed_camera.__logical_height * aspect_ratio
            logical_height = fixed_camera.__logical_height
        end
    end
    
    local left = (fixed_camera.__logical_width - logical_width)/2
    local bottom = (fixed_camera.__logical_height - logical_height)/2
    local right  = left + logical_width
    local top = bottom + logical_height
    
    return left, top, right, bottom
end

function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})
    self.model_pred = render.predicate({"model"})

    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.view = vmath.matrix4()

    local left, top, right, bottom = calc_screen_rect(render.get_width(), render.get_height())

    -- set the values for the fixed_camera module
    fixed_camera.__screen_rect = { left, top, right, bottom }
    fixed_camera.__window_size = { render.get_window_width(), render.get_window_height() }
    
    if left < 0 then
        left = 0
        right = fixed_camera.__logical_width
    end
    if bottom < 0 then
        bottom = 0
        top = fixed_camera.__logical_height
    end
    
    fixed_camera.__viewport_rect = { left, top, right, bottom }
    
    self.projection = vmath.matrix4_orthographic(left, right, bottom, top, -1, 1)
    
    fixed_camera.__calc_matrix(self.projection, self.view, render.get_width(), render.get_height())

    self.frame_resized_subscriber = {}
end

function update(self)
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    
    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
    render.set_view(self.view)

    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)
    
    render.set_projection(self.projection)

    -- render sprites, tiles and particles
    render.draw(self.tile_pred)
    render.draw(self.particle_pred)
    render.draw_debug3d()

    -- model rendering
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.enable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.set_depth_mask(true)
    render.draw(self.model_pred)
    render.disable_state(render.STATE_CULL_FACE)
    render.disable_state(render.STATE_DEPTH_TEST)

    -- render GUI
    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message, sender)
    if message_id == CLEAR_COLOR then
        self.clear_color = message.color
        
    elseif message_id == WINDOW_RESIZED then
        local left, top, right, bottom = calc_screen_rect(message.width, message.height)
        self.projection = vmath.matrix4_orthographic(left, right, bottom, top, -1, 1)
        fixed_camera.__screen_size = { width = message.width, height = message.height }
        fixed_camera.__screen_rect = { left, top, right, bottom }
        fixed_camera.__window_size = { render.get_window_width(), render.get_window_height() }
        fixed_camera.__calc_matrix(self.projection, self.view, render.get_width(), render.get_height())
        
        if left < 0 then
            left = 0
            right = fixed_camera.__logical_width
        end

        if bottom < 0 then
            bottom = 0
            top = fixed_camera.__logical_height
        end

        fixed_camera.__viewport_rect = { left, top, right, bottom }

        local l,t,r,b = fixed_camera.get_viewport_rect()
        for _,url in pairs(fixed_camera.__window_listener_list) do
            msg.post(url, WINDOW_UPDATE, {
                window = {
                    width = render.get_window_width(),
                    height = render.get_window_height()
                },
                viewport = {
                    left = l,
                    top = t,
                    right = r,
                    bottom = b
                }
            })
        end

    elseif message_id == RECALC_MATRIX then
        local size = fixed_camera.__screen_size
        if size == nil then
            size = { width = render.get_width(), height = render.get_height() }
        end
        
        local left, top, right, bottom = calc_screen_rect(size.width, size.height)
        fixed_camera.__screen_rect = { left, top, right, bottom }
        fixed_camera.__window_size = { render.get_window_width(), render.get_window_height() }
        self.projection = vmath.matrix4_orthographic(left, right, bottom, top, -1, 1)
        fixed_camera.__calc_matrix(self.projection, self.view, render.get_width(), render.get_height())
        
        if left < 0 then
            left = 0
            right = fixed_camera.__logical_width
        end
        if bottom < 0 then
            bottom = 0
            top = fixed_camera.__logical_height
        end
        
        fixed_camera.__viewport_rect = { left, top, right, bottom }
        local l,t,r,b = fixed_camera.get_viewport_rect()
        for _,url in pairs(fixed_camera.__window_listener_list) do
            msg.post(url, WINDOW_UPDATE, {
                window = {
                    width = render.get_window_width(),
                    height = render.get_window_height()
                },
                viewport = {
                    left = l,
                    top = t,
                    right = r,
                    bottom = b
                }
            })
        end
        
    elseif message_id == SET_VIEW_PROJECTION then
        self.view = message.view
        fixed_camera.__calc_matrix(self.projection, self.view, render.get_width(), render.get_height())
    end
end
